import { transparentIcon } from "../config/icons.js";
import { relativeTo } from "../helpers.js";
import { logContext } from "../logger.js";
import { Platform, uniformIconOptions } from "./base.js";
const ICONS_OPTIONS = {
    "yandex-browser-50x50.png": transparentIcon(50),
};
export class YandexPlatform extends Platform {
    constructor(options, logger) {
        super(options, uniformIconOptions(options, options.icons.yandex, ICONS_OPTIONS), logContext(logger, "yandex"));
    }
    async createFiles() {
        return [this.manifest()];
    }
    async createHtml() {
        // prettier-ignore
        return [
            `<link rel="yandex-tableau-widget" href="${this.relative(this.manifestFileName())}">`
        ];
    }
    manifestFileName() {
        var _a, _b, _c;
        return ((_c = (_b = (_a = this.options.files) === null || _a === void 0 ? void 0 : _a.yandex) === null || _b === void 0 ? void 0 : _b.manifestFileName) !== null && _c !== void 0 ? _c : "yandex-browser-manifest.json");
    }
    manifest() {
        const basePath = this.options.manifestRelativePaths
            ? null
            : this.options.path;
        const logo = Object.keys(this.iconOptions)[0];
        const properties = {
            version: this.options.version,
            api_version: 1,
            layout: {
                logo: relativeTo(basePath, logo),
                color: this.options.background,
                show_title: true,
            },
        };
        return {
            name: this.manifestFileName(),
            contents: JSON.stringify(properties, null, 2),
        };
    }
}
